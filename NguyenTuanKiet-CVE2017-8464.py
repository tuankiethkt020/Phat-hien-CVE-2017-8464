import pyshark, csv, sys, os, binascii, hashlib
from datetime import datetime
import subprocess
import os
import array
from pathlib import Path
import socket
import tqdm
# import subprocess
def getTCPPayload(packet):
	if 'tcp' in packet:
		if 'tcp.payload' in packet.tcp._all_fields:
			a=str(packet.tcp.payload)
			tcpPayload = a.replace(':','')
			data = bytes.fromhex(tcpPayload)

			# return data.decode('utf-8', 'replace').encode('cp850','replace').decode('cp850')\
			# 	.replace('\n','').replace('\t','')\
			# 	.replace('\r','').replace('\\x', '')\
			# 	.replace(',', '|')
			return data.decode('utf-8', 'replace').encode('cp850','replace').decode('cp850')\
				.replace('\n','').replace('\t','')\
				.replace('\r','').replace('\\x', '')\
				.replace(',', '|')
	return ''

def get_packet_details(packet):

	protocol = packet.transport_layer
	source_address = packet.ip.src
	source_port = packet[packet.transport_layer].srcport
	destination_address = packet.ip.dst
	destination_port = packet[packet.transport_layer].dstport
	packet_time = packet.sniff_time
	packet_data = str(getTCPPayload(packet)).encode('utf-8')
	f = open('result-traffic.csv', 'a')
	writer = csv.writer(f, delimiter=',',lineterminator='\n')
	row = [protocol, source_address, source_port, destination_address, destination_port, packet_time, packet_data]
	writer.writerow(row)
	return {
		"protocol":protocol, 
		"source_address":source_address, 
		"source_port":source_port, 
		"destination_address":destination_address, 
		"destination_port":destination_port, 
		"packet_time":packet_time, 
		"packet_data":packet_data
	}

def capture_live_packets(network_interface):
	capture = pyshark.LiveCapture(interface=network_interface, display_filter="tcp")
	for raw_packet in capture.sniff_continuously():
		p = get_packet_details(raw_packet)
		if isAttackPacket(p) and server():
			time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
			string = time+" [Warning] sr IP:"+p['source_address']+" remote code to dst IP:"+p['destination_address']\
			+" CVE_2019_8464 DETECTED"
			print(string,"\n")
			#Write Log
			with open('log.txt', 'a') as log:
				log.write(string)
				log.write("\n")

def isAttackPacket(p):
	if p['packet_data'] is None:
		return False
	data = str(p['packet_data'])
	if "MZARUH" and "This program cannot be run in DOS mode" in data:
		return True
	return False
def server():
	SERVER_HOST = "192.168.211.11"    
	SERVER_PORT = 10000
	# receive 4096 bytes each time
	BUFFER_SIZE = 4096
	SEPARATOR = "<SEPARATOR>"
	s = socket.socket()
	s.bind(('192.168.211.11', SERVER_PORT))
	s.listen(5)
	print(f"[*] Listening as 192.168.211.11:{SERVER_PORT}")
	client_socket, address = s.accept() 
	print(f"[+] {address} is connected.")
	received = client_socket.recv(BUFFER_SIZE).decode()
	filename, filesize = received.split(SEPARATOR)
	filename = os.path.basename(filename)
	filesize = int(filesize)
	filename1= filename
	progress = tqdm.tqdm(range(filesize), f"Receiving {filename}", unit="B", unit_scale=True, unit_divisor=1024)
	with open(filename, "wb") as f:
		while True:
			bytes_read = client_socket.recv(BUFFER_SIZE)
			if not bytes_read:    
				break
			f.write(bytes_read)
			progress.update(len(bytes_read))
	client_socket.close()
	s.close()
	filename1 = "data.txt"
	if os.path.isfile(filename1):
		print("\nCo file: "+ filename1)
	with open(filename1) as f:
		if "File LNK PAYLOAD" in f.read():
			print("CO FILE LNK LAYLOAD")
			return True
	return False

print('-- Restart Capture --')
try:
	capture_live_packets('VMware Network Adapter VMnet8')
except Exception as e:
	print(e)































# cap = pyshark.FileCapture("tranh1.pcap")
# cap.load_packets()
# pkt = cap[94]
# p = get_packet_details(pkt)
# # data = (pkt.tcp.payload).replace(":","")
# data=getTCPPayload(pkt)
# print(data)
# print("\n==============================================================================================================\n")
# if "%PDF" and "/OpenAction" and "/S /JavaScript /JS" and "foxit_base = leaked - 0x01f50000" and "Int32Array" and "destroy()" and "ArrayBuffer(0x60)" in data:
# 	print("true")
# 	time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
# 	string = time+" [Warning] sr IP:"+p['source_address']+" remote code to dst IP:"+p['destination_address']\
# 	+" CVE_2017_9958 DETECTED"
# 	print(string,"\n")
# 	#Write Log
# 	with open('log.txt', 'a') as log:
# 		log.write(string)
# 		log.write("\n")

# print(p)
# print("\n"+ p['protocol'])
# data1= bytes.fromhex(data).decode()
# print(get_info1(pkt))
# payload = "4d5a4152554889e54883ec204883e4f0e8000000005b4881c3ff5a0000ffd34881c3ecae020048893b4989d86a045affd000"
# if payload in data:
# 	print("pay load")
# 	print(data)
# #convertPcapToCsv()
# # detectRemoteCode()
# print(pkt)
# print(get_protocal(pkt))
# abc = pkt.DATA
# print(str(abc.data))
# print(get_info(pkt))
# print(str(pkt.tcp.payload).replace(":",""))


# print('-- Restart Capture --')
# STREAM = 2
# capture = pyshark.FileCapture('cuoicungkiet.pcap',display_filter="tcp")
# capture.load_packets()
# i=0
# for pkt in capture:
# 	#print(getTCPPayload(pkt))
# 	a = str(getTCPPayload(pkt))
# 	i=i+1
# 	print(get_packet_details(pkt))